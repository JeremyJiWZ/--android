package wj.airwar;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.pm.ActivityInfo;import android.net.Uri;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.DisplayMetrics;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.RelativeLayout;import com.google.android.gms.appindexing.Action;import com.google.android.gms.appindexing.AppIndex;import com.google.android.gms.common.api.GoogleApiClient;public class Double_Activity extends AppCompatActivity {    private int length, screenWidth, screenHeight;    private ImageView box1, box2;//the board    private int player_turn = 1;//player 1 play first    private Airplane player1, player2;//the player    private ImageView shadow_hor, shadow_ver, indicator;//shadow    //UI controller    private int row = 0, col = 0;    private int lastX = 0, lastY = 0;    RelativeLayout.LayoutParams hor_lay;    RelativeLayout.LayoutParams ver_lay;    /**     * ATTENTION: This was auto-generated to implement the App Indexing API.     * See https://g.co/AppIndexing/AndroidStudio for more information.     */    private GoogleApiClient client;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_double_);        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);        //test        DisplayMetrics dm = getResources().getDisplayMetrics();        screenWidth = dm.widthPixels;        screenHeight = dm.heightPixels - 50;        length = screenHeight / 14;        box_init();        image_init();        player1 = GameActivity.player1;        player2 = GameActivity.player2;        box1.setOnTouchListener(new Player_BoomListener());        box2.setOnTouchListener(new Player_BoomListener());        // ATTENTION: This was auto-generated to implement the App Indexing API.        // See https://g.co/AppIndexing/AndroidStudio for more information.        client = new GoogleApiClient.Builder(this).addApi(AppIndex.API).build();    }    private void box_init() {        box1 = (ImageView) findViewById(R.id.box1);        box2 = (ImageView) findViewById(R.id.box2);        RelativeLayout.LayoutParams bp1 = new RelativeLayout.LayoutParams(length * 11, length * 11);        bp1.leftMargin = 0;        bp1.topMargin = length;        box1.setLayoutParams(bp1);        RelativeLayout.LayoutParams bp2 = new RelativeLayout.LayoutParams(length * 11, length * 11);        bp2.leftMargin = length * 12;        bp2.topMargin = length;        box2.setLayoutParams(bp2);    }    private void image_init() {        //initialize the text player1        RelativeLayout.LayoutParams pl1 = new RelativeLayout.LayoutParams(length * 7, length);        pl1.leftMargin = (int) (2.5 * length);        pl1.topMargin = 0;        ImageView p1 = (ImageView) findViewById(R.id.player2);        p1.setLayoutParams(pl1);        //initialize the text player2        RelativeLayout.LayoutParams pl2 = new RelativeLayout.LayoutParams(length * 7, length);        pl2.leftMargin = (int) (14.5 * length);        pl2.topMargin = 0;        ImageView p2 = (ImageView) findViewById(R.id.player1);        p2.setLayoutParams(pl2);        //initialize the indicator        RelativeLayout.LayoutParams idl = new RelativeLayout.LayoutParams(length, length);        idl.leftMargin = 11 * length;        idl.topMargin = 6 * length;        indicator = (ImageView) findViewById(R.id.indicator);        indicator.setLayoutParams(idl);        indicator.setImageResource(R.drawable.indicator_left);        //initialize the shadow        shadow_hor = (ImageView) findViewById(R.id.shadow_horizontal);        shadow_ver = (ImageView) findViewById(R.id.shadow_vertical);        hor_lay = new RelativeLayout.LayoutParams(length * 10, length);        ver_lay = new RelativeLayout.LayoutParams(length, length * 10);        shadow_ver.setLayoutParams(ver_lay);        shadow_hor.setLayoutParams(hor_lay);    }    private void fill_shadow(int player, int row, int col) {        if (player == 2) {            hor_lay.leftMargin = 13 * length;            hor_lay.topMargin = (row + 2) * length;            ver_lay.topMargin = length * 2;            ver_lay.leftMargin = (col + 13) * length;//            Log.e("Inside fill","reset layout");//            Log.e("row",""+row);//            Log.e("col",""+col);        } else {            hor_lay.leftMargin = length;            hor_lay.topMargin = (row + 2) * length;            ver_lay.leftMargin = (col + 1) * length;            ver_lay.topMargin = length * 2;        }//        Log.e("Inside fill","reset layout");//        Log.e("row",""+row);//        Log.e("col",""+col);        shadow_hor.setImageResource(0);        shadow_ver.setImageResource(0);        shadow_hor.setImageResource(R.drawable.fill_horizontal);        shadow_ver.setImageResource(R.drawable.fill_vertical);    }    @Override    public void onStart() {        super.onStart();        // ATTENTION: This was auto-generated to implement the App Indexing API.        // See https://g.co/AppIndexing/AndroidStudio for more information.        client.connect();        Action viewAction = Action.newAction(Action.TYPE_VIEW, // TODO: choose an action type.                "Double_ Page", // TODO: Define a title for the content shown.                // TODO: If you have web page content that matches this app activity's content,                // make sure this auto-generated web page URL is correct.                // Otherwise, set the URL to null.                Uri.parse("http://host/path"),                // TODO: Make sure this auto-generated app deep link URI is correct.                Uri.parse("android-app://wj.airwar/http/host/path"));        AppIndex.AppIndexApi.start(client, viewAction);    }    @Override    public void onStop() {        super.onStop();        // ATTENTION: This was auto-generated to implement the App Indexing API.        // See https://g.co/AppIndexing/AndroidStudio for more information.        Action viewAction = Action.newAction(Action.TYPE_VIEW, // TODO: choose an action type.                "Double_ Page", // TODO: Define a title for the content shown.                // TODO: If you have web page content that matches this app activity's content,                // make sure this auto-generated web page URL is correct.                // Otherwise, set the URL to null.                Uri.parse("http://host/path"),                // TODO: Make sure this auto-generated app deep link URI is correct.                Uri.parse("android-app://wj.airwar/http/host/path"));        AppIndex.AppIndexApi.end(client, viewAction);        client.disconnect();    }    class Player_BoomListener implements ImageView.OnTouchListener {        @Override        public boolean onTouch(View v, MotionEvent event) {            int action = event.getAction();            switch (action) {                case MotionEvent.ACTION_DOWN:                    lastX = (int) event.getRawX();                    lastY = (int) event.getRawY();                    if (player_turn == 2) {                        row = (int) (((lastY - (length * 0.5)) / length) - 3);                        col = (int) ((lastX - length * 0.5) / length - 13);                    } else {                        row = (int) (lastY - length * 0.5) / length - 3;                        col = (int) (lastX - length * 0.5) / length - 1;                    }                    //out of bound                    if (row < 0 || col < 0 || row >= 10 || col >= 10) break;                    fill_shadow(player_turn, row, col);//                    Log.e("row",""+row);//                    Log.e("col",""+col);                    break;                case MotionEvent.ACTION_MOVE:                    lastX = (int) event.getRawX();                    lastY = (int) event.getRawY();                    if (player_turn == 2) {                        row = (int) (((lastY - (length * 0.5)) / length) - 3);                        col = (int) ((lastX - length * 0.5) / length - 13);                    } else {                        row = (int) (lastY - length * 0.5) / length - 3;                        col = (int) (lastX - length * 0.5) / length - 1;                    }                    //out of bound                    if (row < 0 || col < 0 || row >= 10 || col >= 10) break;                    fill_shadow(player_turn, row, col);                    Log.e("row", "" + row);                    Log.e("col", "" + col);                    break;                case MotionEvent.ACTION_UP:                    shadow_hor.setImageResource(0);                    shadow_ver.setImageResource(0);                    //out of bound                    if (row < 0 || col < 0 || row >= 10 || col >= 10) break;                    //begin to boom the plane                    if (player_turn == 1) {                        //boom player2                        boom(2, row, col);                        player_turn = 2;                        indicator.setImageResource(R.drawable.indicator_right);                    } else {                        //boom player1                        boom(1, row, col);                        player_turn = 1;                        indicator.setImageResource(R.drawable.indicator_left);                    }                    break;            }            return false;        }    }    private void boom(int player, int row, int col) {        int status;        //boom the board 1 or 2        if (player == 1) status = player1.boomPlane(row, col);        else status = player2.boomPlane(row, col);        ViewGroup viewGroup = (ViewGroup) findViewById(R.id.doubleLayout);        RelativeLayout.LayoutParams img_lay = new RelativeLayout.LayoutParams(length, length);        if (player == 2) {            img_lay.topMargin = (row + 2) * length;            img_lay.leftMargin = (col + 1) * length;        } else {            img_lay.topMargin = (row + 2) * length;            img_lay.leftMargin = (col + 13) * length;        }        //draw the relative result        switch (status) {            case 0://miss//                    Log.e("row",""+row);//                    Log.e("col",""+col);                ImageView miss = new ImageView(Double_Activity.this);                miss.setLayoutParams(img_lay);                miss.setImageResource(R.drawable.miss);                viewGroup.addView(miss);                break;            case 1://injured//                    Log.e("row",""+row);//                    Log.e("col",""+col);                ImageView injure = new ImageView(Double_Activity.this);                injure.setLayoutParams(img_lay);                injure.setImageResource(R.drawable.injure);                viewGroup.addView(injure);                break;            case 2://dead//                    Log.e("row",""+row);//                    Log.e("col",""+col);                ImageView dead = new ImageView(Double_Activity.this);                dead.setLayoutParams(img_lay);                dead.setImageResource(R.drawable.dead);                viewGroup.addView(dead);                break;            case 3://has been boomed                break;            default://error                break;        }        if (!player1.isAllDead()){            AlertDialog.Builder gameover = new AlertDialog.Builder(Double_Activity.this);            //set title            gameover.setTitle("Game over");            //set message            gameover.setMessage("恭喜！玩家2赢了！");            //set button            gameover.setNeutralButton("好的", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    finish();//                    Log.e("click","finish");                }            });            gameover.show();        }        if (!player2.isAllDead()){            AlertDialog.Builder gameover = new AlertDialog.Builder(Double_Activity.this);            //set title            gameover.setTitle("Game over");            //set message            gameover.setMessage("恭喜！玩家1赢了！");            //set button            gameover.setNeutralButton("好的", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    finish();//                    Log.e("click","finish");                }            });            gameover.show();        }    }    void draw_board(){        ImageView player1_plane1,player1_plane2,player1_plane3,                player2_plane1,player2_plane2,player2_plane3;        RelativeLayout.LayoutParams img_lay = new RelativeLayout.LayoutParams(length, length);        int dir0_player1 = player1.getDirection(0),                dir1_player1 = player1.getDirection(1),                dir2_player1 = player1.getDirection(2),                dir0_player2 = player2.getDirection(0),                dir1_player2 = player2.getDirection(1),                dir2_player2 = player2.getDirection(2);    }    void draw_plane(int player,int num){        ImageView        if (player==1){        }    }}